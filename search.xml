<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>RabbitMQ</title>
      <link href="/posts/33708.html"/>
      <url>/posts/33708.html</url>
      
        <content type="html"><![CDATA[<h1 id="MQ介绍"><a href="#MQ介绍" class="headerlink" title="MQ介绍"></a>MQ介绍</h1><h2 id="MQ概述"><a href="#MQ概述" class="headerlink" title="MQ概述"></a>MQ概述</h2><ul><li>MQ，消息队列，存储消息的中间件</li><li>分布式系统通信两种方式：直接远程调用和借助第三方完成间接通信</li><li>发送方称为生产者，接受方称为消费者</li></ul><h2 id="MQ的基本概念"><a href="#MQ的基本概念" class="headerlink" title="MQ的基本概念"></a>MQ的基本概念</h2><p><strong>优势：</strong></p><ul><li>应用解耦 ：提高系统容错性和可维护性</li><li>异步提速：提高用户体验和系统吞吐量</li><li>削峰填谷：提高系统稳定性</li></ul><p><strong>劣势：</strong></p><ul><li><p>系统可用性降低</p><p>系统引入的外部依赖越多，系统稳定性越差。一旦MQ宕机，就会对业务造成影响，如何保证MQ的高可用性</p></li><li><p>系统复杂度提高</p><p>MQ的加入大大增加了系统的复杂度，以前系统间运行是同步的远程调用，现在是通过MQ进行异步调用。如何保证消息没有被重复消费？怎么处理消息修饰情况？那么保证消息传递的顺序性？</p></li><li><p>一致性问题</p><p>A系统处理完业务，通过MQ给B、C、D三个系统发送消息数据，如果B系统、C系统处理成功，D系统处理失败。如何保证消息数据处理的一致性？</p></li></ul><p><strong>小结：</strong></p><p>既然MQ有优势也有劣势，那么使用MQ需要满足什么条件呢？</p><ul><li>生产者不需要从消费者处获得反馈。引入消息队列之前的直接调用，其接口的返回值应该为空，这才让明明下层的动作还没做，上层却当成动作做完了继续往后走，即所谓异步成为了可能。</li><li>容物短暂的不一致性。</li><li>确实是用了有效果。即解耦、提速、削峰这些方面的收益，超过加入MQ，管理MQ这些成本。</li></ul><h2 id="常见MQ产品"><a href="#常见MQ产品" class="headerlink" title="常见MQ产品"></a>常见MQ产品</h2><p><img src="https://typora-1308143684.cos.ap-nanjing.myqcloud.com/img/image-20230703110046277.png" alt="image-20230703110046277"></p><h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><p><img src="https://typora-1308143684.cos.ap-nanjing.myqcloud.com/img/image-20230703112132387.png" alt="image-20230703112132387"></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><img src="https://typora-1308143684.cos.ap-nanjing.myqcloud.com/img/image-20230703111508713.png" alt="image-20230703111508713"></p><p><img src="https://typora-1308143684.cos.ap-nanjing.myqcloud.com/img/image-20230703111544876.png" alt="image-20230703111544876"></p><p><img src="https://typora-1308143684.cos.ap-nanjing.myqcloud.com/img/image-20230703111721756.png" alt="image-20230703111721756"></p><p><strong>小结：</strong></p><ul><li>RabbitMQ是基于AMQP协议使用Erlang语言开发的一款消息队列产品</li><li>RabbitMQ提供了6种工作模式</li><li>AMQP是协议，类比http</li><li>JMS 是API规范接口，类比JDBC</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>RabbitMQ官方地址：<a href="http://www.rabbitmq.com/">http://www.rabbitmq.com/</a></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h2 id="RabbitMQ快速入门"><a href="#RabbitMQ快速入门" class="headerlink" title="RabbitMQ快速入门"></a>RabbitMQ快速入门</h2><h3 id="入门程序"><a href="#入门程序" class="headerlink" title="入门程序"></a>入门程序</h3><p>需求：使用简单模式完成消息传递</p><h3 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h3><p><img src="https://typora-1308143684.cos.ap-nanjing.myqcloud.com/img/image-20230703184636980.png" alt="image-20230703184636980"></p><h3 id="SpringBoot整合"><a href="#SpringBoot整合" class="headerlink" title="SpringBoot整合"></a>SpringBoot整合</h3><p><strong>生产者</strong></p><ul><li>创建生产者SpringBoot工程</li><li>引入依赖坐标</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>编写yml配置，基本信息配置</li><li>定义交换机，队列以及绑定关系的配置类</li><li>注入RabbitTemplate，调用方法，完成消息发送</li></ul><p>配置信息</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置RabbitMq的基本信息  ip端口  username password</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">172.16</span><span class="number">.98</span><span class="number">.133</span>  <span class="comment"># ip</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>生产者配置类信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;boot_topic_exchange&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;boot_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.交换机</span></span><br><span class="line">    <span class="meta">@Bean(&quot;bootExchange&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Exchange <span class="title function_">bootExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder.topicExchange(EXCHANGE_NAME).durable(<span class="literal">true</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.Queue  队列</span></span><br><span class="line">    <span class="meta">@Bean(&quot;bootQueue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">bootQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(QUEUE_NAME).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.队列和交换机绑定关系  Binding</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 知道哪个队列</span></span><br><span class="line"><span class="comment">     * 2. 知道哪个交换机</span></span><br><span class="line"><span class="comment">     * 3. routing key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindQueueExchange</span><span class="params">(<span class="meta">@Qualifier(&quot;bootQueue&quot;)</span> Queue queue,</span></span><br><span class="line"><span class="params">                                     <span class="meta">@Qualifier(&quot;bootExchange&quot;)</span> Exchange exchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="string">&quot;boot.#&quot;</span>).noargs();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducerTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.注入RabbitTemplate</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSend</span><span class="params">()</span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitConfig.EXCHANGE_NAME,<span class="string">&quot;boot.sss&quot;</span>,<span class="string">&quot;hello 你还好吗.........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>消费者</strong></p><ul><li>创建消费者SpringBoot工程</li><li>引入依赖坐标</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>编写yml配置，基本信息配置</li><li>定义监听类，使用@RabbitListener注解完成队列监听</li></ul><p>配置信息</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置RabbitMq的基本信息  ip端口  username password</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">172.16</span><span class="number">.98</span><span class="number">.133</span>  <span class="comment"># ip</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>监听类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;boot_queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenerQueue</span><span class="params">(Message message)</span>&#123;</span><br><span class="line">        System.out.println(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h1><h2 id="消息可靠性投递"><a href="#消息可靠性投递" class="headerlink" title="消息可靠性投递"></a>消息可靠性投递</h2><p>在使用RabbitMQ的时候，作为消息发送方希望杜绝任何消息丢失或者投递失败场景。RabbitMQ为我们提供了两种方式用来控制消息的投递可靠性模式。</p><ul><li>confirm 确认模式</li><li>return 退回模式</li></ul><p>rabbitmq整个消息投递的路径为</p><p>producer—–&gt;exchange——-&gt;queue——&gt; consumer</p><ul><li>消息从producer到exchange则会返回一个confirmCallback</li><li>消息从exchange到queue投递失败则会返回一个returnCallback</li></ul><h3 id="confirm"><a href="#confirm" class="headerlink" title="confirm"></a>confirm</h3><h3 id="return"><a href="#return" class="headerlink" title="return"></a>return</h3><h2 id="Consumer-ACK"><a href="#Consumer-ACK" class="headerlink" title="Consumer ACK"></a>Consumer ACK</h2><h2 id="消费端限流"><a href="#消费端限流" class="headerlink" title="消费端限流"></a>消费端限流</h2><p><img src="https://typora-1308143684.cos.ap-nanjing.myqcloud.com/img/image-20230704112344934.png" alt="image-20230704112344934"></p><h2 id="TTL"><a href="#TTL" class="headerlink" title="TTL"></a>TTL</h2><p><img src="https://typora-1308143684.cos.ap-nanjing.myqcloud.com/img/image-20230704112427654.png" alt="image-20230704112427654"></p><p><img src="https://typora-1308143684.cos.ap-nanjing.myqcloud.com/img/image-20230704112552925.png" alt="image-20230704112552925"></p><h2 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h2><p><img src="https://typora-1308143684.cos.ap-nanjing.myqcloud.com/img/image-20230704113001353.png" alt="image-20230704113001353"></p><p><img src="https://typora-1308143684.cos.ap-nanjing.myqcloud.com/img/image-20230704113144386.png" alt="image-20230704113144386"></p><p><img src="https://typora-1308143684.cos.ap-nanjing.myqcloud.com/img/image-20230704113423483.png" alt="image-20230704113423483"></p><h2 id="延迟队列"><a href="#延迟队列" class="headerlink" title="延迟队列"></a>延迟队列</h2><p><img src="https://typora-1308143684.cos.ap-nanjing.myqcloud.com/img/image-20230704113804735.png" alt="image-20230704113804735"></p><p><img src="https://typora-1308143684.cos.ap-nanjing.myqcloud.com/img/image-20230704113839874.png" alt="image-20230704113839874"></p><h2 id="日志与监控"><a href="#日志与监控" class="headerlink" title="日志与监控"></a>日志与监控</h2><p><img src="https://typora-1308143684.cos.ap-nanjing.myqcloud.com/img/image-20230704114306754.png" alt="image-20230704114306754"></p><p><img src="https://typora-1308143684.cos.ap-nanjing.myqcloud.com/img/image-20230704114321201.png" alt="image-20230704114321201"></p><h2 id="消息可靠性分析与追踪"><a href="#消息可靠性分析与追踪" class="headerlink" title="消息可靠性分析与追踪"></a>消息可靠性分析与追踪</h2><p><img src="https://typora-1308143684.cos.ap-nanjing.myqcloud.com/img/image-20230704114644305.png" alt="image-20230704114644305"></p><p><img src="https://typora-1308143684.cos.ap-nanjing.myqcloud.com/img/image-20230704114729988.png" alt="image-20230704114729988"></p><p><img src="https://typora-1308143684.cos.ap-nanjing.myqcloud.com/img/image-20230704115320648.png" alt="image-20230704115320648"></p><h2 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h2><h1 id="应用问题"><a href="#应用问题" class="headerlink" title="应用问题"></a>应用问题</h1><ul><li>消息可靠性保障<ul><li>消息补偿机制</li></ul></li><li>消息幂等性保障<ul><li>乐观锁机制</li></ul></li></ul><p><img src="https://typora-1308143684.cos.ap-nanjing.myqcloud.com/img/image-20230704120117729.png" alt="image-20230704120117729"></p><h1 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h1>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
            <tag> 消息中间件 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
